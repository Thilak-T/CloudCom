/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.ejca.rest;

import com.ejca.ejb.AbstractFacade;
import com.ejca.ejb.CommentFacade;
import com.ejca.ejb.DiscussionFacade;
import com.ejca.entity.Comment;
import com.ejca.entity.Discussion;
import java.util.Date;
import java.util.List;
import javax.ejb.EJB;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;

/**
 *
 * @author Nithya
 */
@Stateless
@Path("/comment")
public class CommentFacadeREST extends AbstractFacade<Comment> {
    
    @PersistenceContext(unitName = "CloudComPU")
    private EntityManager em;
    @EJB private CommentFacade ejbComment;
    @EJB private DiscussionFacade ejbDiscussion;

    public CommentFacadeREST() {
        super(Comment.class);
    }

    @GET
    public String getAllOrdersService() {
          return "Hii";
    }
    
    @POST
    @Override
    @Consumes({"application/xml", "application/json"})
    public void create(Comment entity) {
         super.create(entity);
    }

    @PUT
    @Path("{id}")
    @Consumes({"application/xml", "application/json"})
    public void edit(@PathParam("id") Integer id, Comment entity) {
        super.edit(entity);
    }

    @DELETE
    @Path("{id}")
    public void remove(@PathParam("id") Integer id) {
        super.remove(super.find(id));
    }

    @GET
    @Path("{id}")
    @Produces({"application/xml", "application/json"})
    public Comment find(@PathParam("id") Integer id) {
        return super.find(id);
    }

    @GET
    @Override
    @Produces({"application/xml", "application/json"})
    public List<Comment> findAll() {
        return super.findAll();
    }

    @GET
    @Path("{from}/{to}")
    @Produces({"application/xml", "application/json"})
    public List<Comment> findRange(@PathParam("from") Integer from, @PathParam("to") Integer to) {
        return super.findRange(new int[]{from, to});
    }

    @GET
    @Path("count")
    @Produces("text/plain")
    public String countREST() {
        return String.valueOf(super.count());
    }
    
    @GET
    @Path("/{d_Id}/filter")
    @Produces({"application/xml", "application/json"})
    public List<Comment> filterComments(@PathParam("d_Id") Integer discussionId, 
                            @QueryParam("name") String name, @QueryParam("type") String type, @QueryParam("date") Date date) {
        int iType=0;
        if(type.equals("AND"))
            iType = 1;
        if(type.equals("OR"))
            iType = 2;
        if(date == null)
            iType = 3;
        if(name == null)
            iType = 4;
        Discussion discussion = ejbDiscussion.find(discussionId.toString());
        return ejbComment.filterComments(discussion, name, date, iType);
    }

    @Override
    protected EntityManager getEntityManager() {
        return em;
    }
    
}
